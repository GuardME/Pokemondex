name: Deploy Production

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Check if prerelease
        id: check_prerelease
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Generate static site
        run: npm run generate
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ needs.validate-tag.outputs.version }}
          path: .output
          retention-days: 30
      
      - name: Deploy to Vercel (Production)
        id: vercel_deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          working-directory: ./
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.validate-tag.outputs.version }}
          body: |
            ## ðŸš€ Production Deployment
            
            **Version:** ${{ needs.validate-tag.outputs.version }}
            **Environment:** Production
            **Status:** âœ… Deployed
            
            ### ðŸ“¦ What's Included
            - Pokemon Pokedex with 151 Gen 1 Pokemon
            - Optimized build with static generation
            - Responsive design for all devices
            
            ### ðŸ”— Links
            - [Live Demo](${{ steps.vercel_deploy.outputs.preview-url }})
            - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
            
            ### ðŸ“Š Build Info
            - Node.js: 20.x
            - Nuxt: 3.x
            - Built at: ${{ github.event.head_commit.timestamp }}
          prerelease: ${{ needs.validate-tag.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify deployment success
        run: |
          echo "âœ… Successfully deployed ${{ needs.validate-tag.outputs.version }} to production!"
          echo "Preview URL: ${{ steps.vercel_deploy.outputs.preview-url }}"

  deploy-to-netlify:
    runs-on: ubuntu-latest
    needs: validate-tag
    if: false  # Set to true if you want to deploy to Netlify as well
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run generate
      
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './.output/public'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy ${{ needs.validate-tag.outputs.version }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

